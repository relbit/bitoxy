; This is Bitoxy config file.
; Sections, keys and values are case-insensitive, however, router and logger names
; are case-sensitive.
; Bitoxy does not validate this config. Unknown keys and sections are ignored.

;
; Global settings
; ===============
;
; If Bitoxy is run as root, it will bind sockets and switch to User and Group
; specified below.
User = nobody
Group = nogroup

; You can specify number of threads which will Bitoxy create.
; Bitoxy evenly spreads connections within these threads.
; If not specified, number of CPUs is used. There is always at least
; one thread.
;Threads = 4

; If you want to use SSL, you have to set SSLCertificate and SSLPrivateKey.
; All services which can use SSL will use this certificate and key. It is possible
; to specify different certificates and keys for each service.
; Both certificate and key must be in PEM format. Key should be readable only by root.
;SSLCertificate = bitoxy.crt
;SSLPrivateKey = bitoxy.key
SSLCertificate = /home/aither/workspace/cpp/bitoxy/bitoxy.crt
SSLPrivateKey = /home/aither/workspace/cpp/bitoxy/bitoxy.key

;
; Logging options
; ===============
;
; Log section format:
;	[Log:<logger type>:<logger name>]
;
; The only logger type for now is 'syslog'.
;
; This section has nothing to do with bitoxy command line paremeter --logfile,
; which is used to redirect debug messages and daemon errors from stdout.
;
; You can create multiple loggers and attach them to services as access logs.
;
; Option format accepts following variables:
;   $type         access or error
;   $worker       worker id
;   $service      only ftp for now
;   $conn_id      connection number, relative to service
;   $cmd_id       command number, relative to connection
;   $cmd_str      client command, in addition to FTP commands, $cmd_str also might be
;                 'new connection'
;   $status_code  reply status number
;   $status_str   reply text
;   $bytes_sent   number of bytes sent on data channel
;   $user         username if authenticated, otherwise -
;   $client_ip    client IP address
;   $client_port  client port
;   $server_ip    target server address or none
;   $server_port  target server port or 0
;   $proxy        p if command is forwarded to target server, else -
;   $encryption   e if connection is encrypted, else -
;   $datetime     date and time in ISO format
;
; Syslog logger
; -------------
;

[Log:syslog:default]
; Plain text log
format = "$client_ip:$client_port $worker/$conn_id/$cmd_id \"$cmd_str\" -> $bytes_sent \"$status_code $status_str\" <- $server_ip:$server_port [$encryption,$proxy,$user]"

; JSON encoded log
;format = "{ \"client\": {\"addr\": \"$client_ip\", \"port\": $client_port, \"connection_id\": $conn_id, \"command_id\": $cmd_id, \"command\": \"$cmd_str\"}, \"reply\": {\"status\": \"$status_code\", \"msg\": \"$status_str\", \"data\": $bytes_sent}, \"server:\" {\"addr\": \"$server_ip\", \"port\": $server_port}, \"encrypted\": \"$encryption\", \"proxied\": \"$proxy\", \"user\": \"$user\" }"

; Facility, see 'man 3 syslog' for explanation. There is only one facility
; for all syslog loggers, as there is only one connection to syslog, no matter
; how many loggers you create. The first facility is used, others are ignored.
; Possible values: daemon, ftp, local0-7, user; defaults to daemon
;facility = daemon

;
; Routers
; =======
;
; Router section format:
;	[Router:<router type>:<router name>]
;
; Router type can be SQL or Static for now. Router name is then used
; in service section to associate router with the service.
; There's always one instance of router in Bitoxy, even if multiple services
; are using it. Every router has it's own cache.
;
; SQL router
; ----------
;
; Query must return one row with two columns - server address and port.
;
; SQL router can work with all databases supported by Qt,
; see http://qt-project.org/doc/qt-4.7/sql-driver.html.

[Router:SQL:Relbit]
Driver = QMYSQL
Host = 127.0.0.1
Port = 3306
Database = relbit
User = bitoxy
Password = secret
Query = "SELECT server_ip, server_port FROM users WHERE user = :username LIMIT 1"
Cache = true
TTL = 300

;
; Static router
; -------------
;
; Static router routes every user to one server.

[Router:Static:StaticRouter]
Host = 127.0.0.1
Port = 21

;
; Services
; ========
;
; Service section format:
;	[Service:<service type>]
;
; FTP service
; -----------
;

[Service:FTP]
; IP address and port Bitoxy will listen on
Host = 0.0.0.0, ::0
Port = 2121

; Currently (permanently?), only explicit FTPS is supported, since implicit is considered
; deprecated.
Ssl = explicit

; This is for explicit FTPS only. Bitoxy will deny every command until
; client connection is encrypted. This option works only for connection
; between Bitoxy and client. If you want to force SSL for connection
; to internal FTP server, see ProxySslMode.
ForceSsl = false

; You can choose whether FTPS on internal network is enabled always, never
; or whenever client chooses.
; Possible values: explicit, false, auto (default, client decides)
ProxySslMode = auto

; Active mode usually doesn't have to be proxied, since all those
; FTP servers hidden behind Bitoxy will probably have Internet connection.
; When using SSL, this must be on or certificate on internal FTP server and
; Bitoxy must be the same. Otherwise clients might complain.
; It is recommended to turn this off, because it will needlessly burden Bitoxy.
ProxyActiveMode = true

; With ProxyMode you can force transfer mode between Bitoxy
; and internal FTP server.
; ProxyMode can be active, passive or auto (default, Bitoxy will use
; the same mode as client uses).
ProxyMode = auto

; Use access log defined earlier
AccessLog = default

; Name of router which will be used to route users to internal FTP servers.
Router = Relbit

; Buffer size directly affects CPU usage. The smaller buffer is, the more is forward function
; called. Value should be rather bigger on fast connections and smaller on slow connections.
ReadBufferSize = 32768

;
; SSH service (not implemented)
; -----------------------------
;
;[Service:SSH]
;Host = 0.0.0.0
;Port = 2222
